setwd("~/Documents/QMEE/Week8/Code/")
sample(seq(10),2)
sample(seq(10),2)
sample(seq(10),2)
sample(seq(10),2)
sample(seq(10),2)
sample(seq(10),2)
while 1>0
sample(seq(10),2)
while x
sample(seq(10),2)
while 1
sample(seq(10),2)
while TRUE
sample(seq(10),2)
for i =1:100
sample(seq(10),2)
end
for i =1:100
sample(seq(10),2)
end
test = sample(seq(10),2)
test
test[1]
test[2]
c(dies, mates) = test
test.split()
split(test)
[a,b] = test
source("model_functions.R")
community = c(10,5,13)
neutral_step(community)
source("model_functions.R")
community = c(10,5,13)
neutral_step(community)
print(community)
neutral_step(community)
print(community)
neutral_step(community)
cat
print
print("alle")
fate = choose_two(length(community))
community[fate[1]] <- community[fate[2]] # Kill the individual in entry fate[1] and replace with another individual from species in fate[2]
print(community)
g2 = neutral_step(community)
g2
View(neutral_step)
source("model_functions.R")
community = c(10,5,13)
g1 = community
g2 = neutral_step(g1)
g3 = neutral_step(g2)
g1
g2
g3
View(species_richness)
source("model_functions.R")
neutral_generation(community)
neutral_generation(community)
neutral_generation(community)
neutral_generation(seq(10))
neutral_generation(seq(11))
source("model_functions.R")
neutral_generation(seq(11))
neutral_generation(seq(11))
neutral_generation(seq(11))
neutral_generation(seq(11))
source("model_functions.R")
neutral_generation(seq(11))
neutral_generation(seq(11))
zeros(1,3)
numeric(10)
source("model_functions.R")
neutral_time_series(initialise_max(7),20)
source("model_functions.R")
neutral_time_series(initialise_max(7),20
)
neutral_time_series(initialise_max(7),20)
neutral_time_series(initialise_max(7),20)
neutral_time_series(initialise_max(7),20)
neutral_time_series(initialise_max(7),20)
source("model_functions.R")
neutral_time_series(initialise_max(7),20)
source("model_functions.R")
neutral_time_series(initialise_max(7),20)
neutral_time_series(initialise_max(7),20)
neutral_time_series(initialise_max(7),20)
neutral_time_series(initialise_max(10),20)
neutral_time_series(initialise_max(10),20)
neutral_time_series(initialise_max(10),20)
neutral_time_series(initialise_max(10),20)
neutral_time_series(initialise_max(10),20)
test = neutral_time_series(seq(7),20)
source("model_functions.R")
test = neutral_time_series(seq(7),20)
test
plot(test)
xlab = "x"
plot(test, xlab = "x")
source("model_functions.R")
question_8()
source("model_functions.R")
question_8()
source("model_functions.R")
source("model_functions.R")
question_8()
runif(0,1)
runif(1)
?runif
runif
runif()
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
source("model_functions.R")
neutral_step_speciation(c(10,5,13),0.5)
neutral_step_speciation(c(10,5,13),0.5)
neutral_step_speciation(c(10,5,13),0.5)
neutral_step_speciation(c(10,5,13),0.5)
neutral_step_speciation(c(10,5,13),0.5)
neutral_step_speciation(c(10,5,13),0.5)
neutral_step_speciation(c(10,5,13),0.5)
neutral_step_speciation(c(10,5,13),0.5)
neutral_step_speciation(c(10,5,13),0.5)
neutral_step_speciation(c(10,5,13),0.5)
neutral_step_speciation(c(10,5,13),0.5)
neutral_step_speciation(c(10,5,13),0.5)
source("model_functions.R")
neutral_generation_speciation(c(10,5,13),0.5)
source("model_functions.R")
neutral_generation_speciation(c(10,5,13),0.5)
neutral_generation_speciation(c(10,5,13),0.5)
neutral_generation_speciation(c(10,5,13),0.5)
neutral_generation_speciation(c(10,5,13),0.5)
neutral_generation_speciation(c(10,5,13),0.5)
source("model_functions.R")
neutral_time_series_speciation(initialise_max(7),20,0.5)
source("model_functions.R")
neutral_time_series_speciation(initialise_max(7),20,0.5)
neutral_time_series_speciation(initialise_max(7),100,0.5)
test = initialise_max(5)
test[4] = 1.0.1
find
?find
test = seq(20)
test
find(2*, test)
find(2* , str(test)
find(2* , str(test))
apropos(2* , str(test))
apropos(2* , where=str(test))
find(2)
find("as")
test = as.matrix(test)
test
test = as.matrix(test)''
test = as.matrix(test)'
source("model_functions.R")
question_12()
source("model_functions.R")
source("model_functions.R")
question_12()
source("model_functions.R")
question_12()
question_12()
question_12()
source("model_functions.R")
question_12()
question_12()
source("model_functions.R")
question_12()
debugSource('~/Documents/QMEE/Week8/Code/model_functions.R')
question_12()
plotframe
rbind(time_series_max, time_series_min)
test = rbind(time_series_max, time_series_min)
test[1]
test[2]
test[3]
test = rbind(as.matrix(time_series_max), as.matrix(time_series_min))
test
test = cbind(as.matrix(time_series_max), as.matrix(time_series_min))
test
plotframe <- data.frame(generations = seq(numGen), series = cbind(as.matrix(time_series_max), as.matrix(time_series_min)))
plotframe <- data.frame(generations = seq(numGen)-1, series = cbind(as.matrix(time_series_max), as.matrix(time_series_min)))
plotframe <- data.frame(generations = seq(numGen+1)-1, series = cbind(as.matrix(time_series_max), as.matrix(time_series_min)))
qplot(generations, series, data = plotframe, geom='line')
plotframe$generations
plotframe$series.1
ggplot(plotframe, aes(generations)) +
geom_line(aes(y=series.1, colour = "Maximally diverse start")) +
geom_line(aes(y=series.2, colour - "Minimally diverse start"))
ggplot(plotframe, aes(generations)) +
geom_line(aes(y=series.1, colour = "Maximally diverse start")) +
geom_line(aes(y=series.2, colour = "Minimally diverse start"))
source("model_functions.R")
question_12()
source("model_functions.R")
question_12()
source("model_functions.R")
question_8()
source("model_functions.R")
question_8()
source("model_functions.R")
question_8()
source("model_functions.R")
question_8()
question_12()
source("model_functions.R")
source("model_functions.R")
question_12()
source("model_functions.R")
question_12()
del test
rm test
rm(test)
rm(c(g1, g2, g3))
rm(c("g1", "g2", "g3"))
rm(g1 g2 g3)
rm(g1)
rm(g2)
rm(g3)
rm(xlab)
table(community)
community = sample(seq(10),30,replace = TRUE)
table(community)
sort(community)
?sort
dim(table(community))
table(community)[2,:]
table(community)[2,]
table(community)[1,]
table(community)[1]
table(community)[1][2]
table(community)[1][1]
table(community)[1]
test = table(community)[1]
?table
table(community)
table(community)[1]
sort(table)
sort(table(community))
?sort
test = sort(table(community), decreasing=TRUE)
test
test.names
?table
source("model_functions.R")
species_abundance(c(1,5,3,6,5,6,1,1))
source("model_functions.R")
source("model_functions.R")
species_abundance(c(1,5,3,6,5,6,1,1))
source("model_functions.R")
species_abundance(c(1,5,3,6,5,6,1,1))
?log
# This function bins the abundances of species into octave classes (based on powers of 2).
abundances = species_abundance(community)
maxbin = floor(log2(max(abundances)))
maxbin
2^4
2^6
2^7
?tabulate
tabulate(species_abundance(community))
species_abundance(community)
test = species_abundance(community)
test > 2
source("model_functions.R")
octaves(c(100,64,63,5,4,3,2,2,1,1,1,1))
2^2
2^i-1
source("model_functions.R")
octaves(c(100,64,63,5,4,3,2,2,1,1,1,1))
test = octaves(c(100,64,63,5,4,3,2,2,1,1,1,1))
test
debugSource('~/Documents/QMEE/Week8/Code/model_functions.R')
#====================================================================================================================================
# 14
octaves <- function(abundances) {
# This function bins the abundances of species into octave classes (based on powers of 2).
log_abundances = log2(abundances)
binCeiling = floor(log2(max(abundances)))+1  # Find the power of two relating to the final bin.
binning = numeric(binCeiling)  # Initialise vector to hold result.
i=1
while (i<binCeiling) {
binning[i] = sum(as.numeric(2^(i-1) <= log_abundances && log_abundances < 2^i))
i = i+1
}
}
test = octaves(c(100,64,63,5,4,3,2,2,1,1,1,1))
debugSource('~/Documents/QMEE/Week8/Code/model_functions.R')
test = octaves(c(100,64,63,5,4,3,2,2,1,1,1,1))
debugSource('~/Documents/QMEE/Week8/Code/model_functions.R')
test = octaves(c(100,64,63,5,4,3,2,2,1,1,1,1))
test
test = octaves(c(100,64,63,5,4,3,2,2,1,1,1,1))
test
source('~/Documents/QMEE/Week8/Code/model_functions.R')
test = octaves(c(100,64,63,5,4,3,2,2,1,1,1,1))
test
debugSource('~/Documents/QMEE/Week8/Code/model_functions.R')
test = octaves(c(100,64,63,5,4,3,2,2,1,1,1,1))
2^(i-1) == floor(log_abundances)
log_abundances
debugSource('~/Documents/QMEE/Week8/Code/model_functions.R')
debugSource('~/Documents/QMEE/Week8/Code/model_functions.R')
source('~/Documents/QMEE/Week8/Code/model_functions.R')
test = octaves(c(100,64,63,5,4,3,2,2,1,1,1,1))
test
source('~/Documents/QMEE/Week8/Code/model_functions.R')
source('~/Documents/QMEE/Week8/Code/model_functions.R')
test = octaves(c(100,64,63,5,4,3,2,2,1,1,1,1))
test
tabulate(abundances)
abundances
tabulate(floor(log2(abundances)))
log2(abundances)
floor(log2(abundances))
abundances
abundances = species_abundance(c(100,64,63,5,4,3,2,2,1,1,1,1))
floor(log2(abundances))
tabulate(floor(log2(abundances)))
numeric(0)
numeric(3)
numeric(0)
source('~/Documents/QMEE/Week8/Code/model_functions.R')
sum_vect(c(0,1,2,3,4),c(0,1,2))
sum_vect(c(1,3),c(1,0,5,2))
sum_vect(c(1,3),c(1,0,5,2))
source('~/Documents/QMEE/Week8/Code/model_functions.R')
sum_vect(c(1,3),c(1,0,5,2))
sum_vect(c(1,3),c(1,0))
