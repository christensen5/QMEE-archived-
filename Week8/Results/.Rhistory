for (i in seq(3,3)) {
set.seed(i)
cluster_run(speciation_rate,
size[i],
wall_time,
interval_rich,
interval_oct[i],
burn_in_generations[i],
output_file_name = paste0(getwd(),"/debug",iter[i],".rda")
)
}
# First define all the functions required to produce our actual population model:
species_richness <- function(community) {
# This function accepts a vector wherein each entry is the identity of the species in the relevant position in the environment.
return(length(unique(community)))
}
initialise_min <- function(size){
# This function creates an initial state for the simulation community with the minimum possible number of species for the community size.
return(rep(1,size))
}
choose_two <- function(x) {
# Generate a random pair of DIFFERENT integers between 1 and x (inclusive).
return(sample(seq(x),2))
}
neutral_step <- function(community) {
# This function performs a single step of a simple neutral model simulation, without speciation, on the community vector.
fate = choose_two(length(community))  # Choose the indexes of the individual to die and to reproduce.
community[fate[1]] <- community[fate[2]] # Kill the individual in entry fate[1] and replace with another individual from species in fate[2]
return(community)
}
neutral_step_speciation <- function(community, v) {
# This performs a step of a neutral model with speciation (with speciation probability v).
roll = runif(1)
if (roll > v) {
return(neutral_step(community))  # reduce to non-speciation case if speciation doesnt occur this step.
} else {
fate = sample(length(community),1)  # Choose the index of the individual to speciate.
community[fate] = max(community) + 1  # Give the new species a new label.
# It doesn't matter if this number has been used as a label before and died out, as long as its not currently in use (since we only care about species richness, not species history).
return(community)
}
}
neutral_generation_speciation <- function(community,v) {
# This function performs neutral_step_speciation() on a community for a single generation's worth of timesteps (= communitysize/2)
generationTime = length(community)/2
i = 1
while (i < generationTime) {
community = neutral_step_speciation(community,v)  # Perform the simulation step.
i = i+1
}
return(community)
}
species_abundance <- function(community) {
# This function computes the species abundances in the community.
return(as.numeric(sort(table(community), decreasing=TRUE)))
}
octaves <- function(abundances) {
# This function bins the abundances of species into octave classes (based on powers of 2).
log_abundances = log2(abundances)
binCeiling = floor(log2(max(abundances)))+1  # Find the power of two relating to the final bin.
binning = numeric(binCeiling)  # Initialise vector to hold result.
i=1
while (i<=binCeiling) {
binning[i] = sum(as.numeric(i-1 == floor(log_abundances)))
i = i+1
}
return(binning)
}
#====================================================================================================================================
# Now define a function which will carry out the modelling and save outputs etc...
cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name) {
# We'll use a timer to keep track of how long we have left on the HPC server.
starttime = proc.time()[3]
# Initialise ALL THE THINGS!!
community = initialise_min(size)
richness = numeric(0)
abundances = list()
numGenerations = 1
# Simulate until we near wall_time.
while ((proc.time()[3] - starttime) / 60 < wall_time) {
numGenerations = numGenerations + 1
community = neutral_generation_speciation(community, speciation_rate)
# Store species richness every interval_rich generations until burn-in is complete.
if ((numGenerations <= burn_in_generations) && (numGenerations%%interval_rich == 0)) {
richness = c(richness, species_richness(community))
}
# Store species abundance octaves every interval_oct generations for the entire simulation.
if (numGenerations%%interval_oct == 0) {
abundances = c(abundances, list(octaves(species_abundance(community))))
}
}
# When wall_time is reached, stop and save the results.
runtime_mins = (proc.time()[3]-starttime)/60
save(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name, richness, abundances, community, numGenerations, runtime_mins, file = output_file_name)
}
#debug
speciation_rate = 0.005864  # Personal randomised speciation rate
wall_time = 0.25*60
size = c(500, 1000, 2500, 5000)
iter= c(1,2,3,4)
interval_rich = 1
interval_oct = size/10
burn_in_generations = 8*size
for (i in seq(3,3)) {
set.seed(i)
cluster_run(speciation_rate,
size[i],
wall_time,
interval_rich,
interval_oct[i],
burn_in_generations[i],
output_file_name = paste0(getwd(),"/debug",iter[i],".rda")
)
}
load(paste0(getwd(),"/debug3.rda"))
source('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
debugSource('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
octave_mean_500
debugSource('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
debugSource('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
source('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
rm("burn_in5000")
rm("burn_in2500")
source('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
char()
character()
character(1)
character(1)
str(1)
toString(1)
names_500 = character()
for (i in seq(1,length(octave_mean_500))) {
names_500 = c(parse(text=paste0("2^",toString(i-1)," - 2^",toString(i))))
}
names_500
names_500 = character()
for (i in seq(1,length(octave_mean_500))) {
names_500 = c(names_500, parse(text=paste0("2^",toString(i-1)," - 2^",toString(i))))
}
names_500
character(names_500)
toString(names_500)
toString(names_500)[1]
barplot(octave_mean_500,
ylim = c(0,2*ceiling(max(octave_mean_500)/2)),
main = "title",
col = "navy",
xlab = "Abundance Octaves",
ylab = "Species Counts",
names.arg = names_500
#names.arg=c(parse(text=("2^0 - 2^1")), parse(text=("2^1 - 2^2")), parse(text=("2^2 - 2^3")),
#parse(text=("2^3 - 2^4")), parse(text=("2^4 - 2^5")), parse(text=("2^5 - 2^6")))
)
names_500 = character()
for (i in seq(1,length(octave_mean_500))) {
names_500 = c(names_500, parse(text=paste0("2^",toString(i-1)," - 2^",toString(i))))
}
plot_500 = barplot(octave_mean_500,
ylim = c(0,2*ceiling(max(octave_mean_500)/2)),
main = "title",
col = "navy",
xlab = "Abundance Octaves",
ylab = "Species Counts",
names.arg = names_500
)
names = list()
plots = list()
for (k in c(1,2,3,4)) {
names = c(names, character())
for (l in seq(1,length(octave_mean_500))) {
names[[k]] = c(names[[k]], parse(text=paste0("2^",toString(l-1)," - 2^",toString(l))))
}
plot_k = barplot(octave_mean_500,
ylim = c(0,2*ceiling(max(octave_mean_500)/2)),
main = "title",
col = "navy",
xlab = "Abundance Octaves",
ylab = "Species Counts",
names.arg = names_500
)
plots = c(plots, plot_k)
}
debugSource('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
names
names[1]
names[[1]]
names = list()
plots = list()
for (k in c(1,2,3,4)) {
names = c(names, character())
for (l in seq(1,length(octave_mean_500))) {
names[k] = c(names[k], parse(text=paste0("2^",toString(l-1)," - 2^",toString(l))))
}
plot_k = barplot(octave_mean_500,
ylim = c(0,2*ceiling(max(octave_mean_500)/2)),
main = "title",
col = "navy",
xlab = "Abundance Octaves",
ylab = "Species Counts",
names.arg = names_500
)
plots = c(plots, plot_k)
}
names = list()
plots = list()
for (k in c(1,2,3,4)) {
names = c(names, character())
for (l in seq(1,length(octave_mean_500))) {
names[k] = c(names[[k]], parse(text=paste0("2^",toString(l-1)," - 2^",toString(l))))
}
plot_k = barplot(octave_mean_500,
ylim = c(0,2*ceiling(max(octave_mean_500)/2)),
main = "title",
col = "navy",
xlab = "Abundance Octaves",
ylab = "Species Counts",
names.arg = names_500
)
plots = c(plots, plot_k)
}
for (k in c(1,2,3,4)) {
names = c(names, parse(text="2^0 - 2^1"))
for (l in seq(2,length(octave_mean_500))) {
names[k] = c(names[[k]], parse(text=paste0("2^",toString(l-1)," - 2^",toString(l))))
}
plot_k = barplot(octave_mean_500,
ylim = c(0,2*ceiling(max(octave_mean_500)/2)),
main = "title",
col = "navy",
xlab = "Abundance Octaves",
ylab = "Species Counts",
names.arg = names_500
)
plots = c(plots, plot_k)
}
debugSource('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
names
names[k]
names[[k]]
names
debugSource('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
names
debugSource('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
# Plot
names = list(list(), list(), list(), list())
names
names[1] = c("a", "b")
names[[1]] = c("a", "b")
names[1]
names[[1]]
names[[1]] = c(names[[1]], "c")
names[[1]]
debugSource('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
names
names[1]
names[[1]]
debugSource('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
debugSource('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
names
debugSource('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
names
names[[1]]
debugSource('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
plots
names
plot_df = data.frame(bins = seq(1,length(octave_mean_500)), counts = octave_mean_500)
plot_df
library(ggplot2)
p = ggplot2(data = plot_df, aes(x = bins, y = counts)) + geom_bar(stat="identity")
p = ggplot(data = plot_df, aes(x = bins, y = counts)) + geom_bar(stat="identity")
p
octave_means = list(octave_mean_500, octave_mean_1000, octave_mean_2500, octave_mean_5000)
octave_means[[1]]
source('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
source('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
plots[1]
multiplot(plots[[1]], plots[[2]], plots[[3]], plots[[4]])
source('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
plots[[1]]
plots[1]
graphics.off()
par(mfrow=c(2,2))
for (k in c(1,2,3)) {
names[[k]] = c(names[[k]], parse(text="2^0 - 2^1"))
for (l in seq(2,length(octave_means[[k]]))) {
names[[k]] = c(names[[k]], parse(text=paste0("2^",toString(l-1)," - 2^",toString(l))))
}
plot_df = data.frame(bins = seq(1,length(octave_means[[k]])), counts = octave_means[[k]])
plot_k = ggplot(data = plot_df, aes(x = bins, y = counts)) +
geom_bar(stat="identity")
plot_k
#plots = c(plots, plot_k)
}
plot_k
plot_k
par(mfrow=c(2,2))
plot_k
plot_k
# Plot
names = list(list(), list(), list(), list())
plots = list()
octave_means = list(octave_mean_500, octave_mean_1000, octave_mean_2500, octave_mean_5000)
for (k in c(1,2,3)) {
names[[k]] = c(names[[k]], parse(text="2^0 - 2^1"))
for (l in seq(2,length(octave_means[[k]]))) {
names[[k]] = c(names[[k]], parse(text=paste0("2^",toString(l-1)," - 2^",toString(l))))
}
plot_df = data.frame(bins = seq(1,length(octave_means[[k]])), counts = octave_means[[k]])
plot_k = ggplot(data = plot_df, aes(x = bins, y = counts)) +
geom_bar(stat="identity")
plot_k
plots = c(plots, plot_k)
}
multiplot(plotlist = plots, cols = 2)
# Plot
names = list(list(), list(), list(), list())
plots = list()
octave_means = list(octave_mean_500, octave_mean_1000, octave_mean_2500, octave_mean_5000)
for (k in c(1,2,3)) {
names[[k]] = c(names[[k]], parse(text="2^0 - 2^1"))
for (l in seq(2,length(octave_means[[k]]))) {
names[[k]] = c(names[[k]], parse(text=paste0("2^",toString(l-1)," - 2^",toString(l))))
}
plot_df = data.frame(bins = seq(1,length(octave_means[[k]])), counts = octave_means[[k]])
plot_k = ggplot(data = plot_df, aes(x = bins, y = counts)) +
geom_bar(stat="identity")
plot_k
#plots = c(plots, plot_k)
plots[[k]] = plot_k
}
multiplot(plotlist = plots, cols = 2)
# Plot
names = list(list(), list(), list(), list())
plots = list()
octave_means = list(octave_mean_500, octave_mean_1000, octave_mean_2500, octave_mean_5000)
titles = c("500", "1000", "2500", "5000")
for (k in c(1,2,3)) {
names[[k]] = c(names[[k]], parse(text="2^0 - 2^1"))
for (l in seq(2,length(octave_means[[k]]))) {
names[[k]] = c(names[[k]], parse(text=paste0("2^",toString(l-1)," - 2^",toString(l))))
}
plot_df = data.frame(bins = seq(1,length(octave_means[[k]])), counts = octave_means[[k]])
plots[[k]] = ggplot(data = plot_df, aes(x = bins, y = counts), colour="navy") +
geom_bar(stat="identity") +
labs(title = titles[k], x = names, y = "counts")
}
multiplot(plotlist = plots, cols = 2)
# Plot
names = list(list(), list(), list(), list())
plots = list()
octave_means = list(octave_mean_500, octave_mean_1000, octave_mean_2500, octave_mean_5000)
titles = c("Initial population = 500", "Initial population = 1000", "Initial population = 2500", "Initial population = 5000")
for (k in c(1,2,3)) {
names[[k]] = c(names[[k]], parse(text="2^0 - 2^1"))
for (l in seq(2,length(octave_means[[k]]))) {
names[[k]] = c(names[[k]], parse(text=paste0("2^",toString(l-1)," - 2^",toString(l))))
}
plot_df = data.frame(bins = seq(1,length(octave_means[[k]])), counts = octave_means[[k]])
plots[[k]] = ggplot(data = plot_df, aes(x = bins, y = counts), colour="navy") +
geom_bar(stat="identity") +
labs(title = titles[k], x = "Abundance Octaves", y = "Counts") +
scale_x_discrete(labels = names)
}
multiplot(plotlist = plots, cols = 2)
for (k in c(1,2,3)) {
names[[k]] = c(names[[k]], parse(text="2^0 - 2^1"))
for (l in seq(2,length(octave_means[[k]]))) {
names[[k]] = c(names[[k]], parse(text=paste0("2^",toString(l-1)," - 2^",toString(l))))
}
plot_df = data.frame(bins = seq(1,length(octave_means[[k]])), counts = octave_means[[k]])
plots[[k]] = ggplot(data = plot_df, aes(x = bins, y = counts), colour="navy") +
geom_bar(stat="identity") +
labs(title = titles[k], x = "Abundance Octaves", y = "Counts") +
scale_x_continuous(breaks = 1:length(octave_means[[k]]), labels = names)
}
multiplot(plotlist = plots, cols = 2)
length(octave_means[[k]])
langth(names)
length(names)
for (k in c(1,2,3)) {
names[[k]] = c(names[[k]], parse(text="2^0 - 2^1"))
for (l in seq(2,length(octave_means[[k]]))) {
names[[k]] = c(names[[k]], parse(text=paste0("2^",toString(l-1)," - 2^",toString(l))))
}
plot_df = data.frame(bins = seq(1,length(octave_means[[k]])), counts = octave_means[[k]])
plots[[k]] = ggplot(data = plot_df, aes(x = bins, y = counts), colour="navy") +
geom_bar(stat="identity") +
labs(title = titles[k], x = "Abundance Octaves", y = "Counts") +
scale_x_continuous(breaks = 1:length(octave_means[[k]]), labels = names[[k]])
}
multiplot(plotlist = plots, cols = 2)
length(names[[1]])
names[[1]]
names[[1]][1]
names[[1]][2]
names[[1]][3]
names[[1]][10]
# Plot
names = list(list(), list(), list(), list())
plots = list()
octave_means = list(octave_mean_500, octave_mean_1000, octave_mean_2500, octave_mean_5000)
titles = c("Initial population = 500", "Initial population = 1000", "Initial population = 2500", "Initial population = 5000")
for (k in c(1,2,3)) {
names[[k]] = c(names[[k]], parse(text="2^0 - 2^1"))
for (l in seq(2,length(octave_means[[k]]))) {
names[[k]] = c(names[[k]], parse(text=paste0("2^",toString(l-1)," - 2^",toString(l))))
}
plot_df = data.frame(bins = seq(1,length(octave_means[[k]])), counts = octave_means[[k]])
plots[[k]] = ggplot(data = plot_df, aes(x = bins, y = counts), colour="navy") +
geom_bar(stat="identity") +
labs(title = titles[k], x = "Abundance Octaves", y = "Counts") +
scale_x_continuous(breaks = 1:length(octave_means[[k]]), labels = names[[k]])
}
multiplot(plotlist = plots, cols = 2)
# Plot
names = list(list(), list(), list(), list())
plots = list()
octave_means = list(octave_mean_500, octave_mean_1000, octave_mean_2500, octave_mean_5000)
titles = c("Initial population = 500", "Initial population = 1000", "Initial population = 2500", "Initial population = 5000")
for (k in c(1,2,3)) {
names[[k]] = c(names[[k]], parse(text="2^0 - 2^1"))
for (l in seq(2,length(octave_means[[k]]))) {
names[[k]] = c(names[[k]], parse(text=paste0("2^",toString(l-1)," - 2^",toString(l))))
}
plot_df = data.frame(bins = seq(1,length(octave_means[[k]])), counts = octave_means[[k]])
plots[[k]] = ggplot(data = plot_df, aes(x = bins, y = counts)) +
geom_bar(stat="identity", fill="navy") +
labs(title = titles[k], x = "Abundance Octaves", y = "Counts") +
scale_x_continuous(breaks = 1:length(octave_means[[k]]), labels = names[[k]])
}
multiplot(plotlist = plots, cols = 2)
# Plot
names = list(list(), list(), list(), list())
plots = list()
octave_means = list(octave_mean_500, octave_mean_1000, octave_mean_2500, octave_mean_5000)
titles = c("Initial population = 500", "Initial population = 1000", "Initial population = 2500", "Initial population = 5000")
for (k in c(1,2,3)) {
names[[k]] = c(names[[k]], parse(text="2^0 - 2^1"))
for (l in seq(2,length(octave_means[[k]]))) {
names[[k]] = c(names[[k]], parse(text=paste0("2^",toString(l-1)," - 2^",toString(l))))
}
plot_df = data.frame(bins = seq(1,length(octave_means[[k]])), counts = octave_means[[k]])
plots[[k]] = ggplot(data = plot_df, aes(x = bins, y = counts)) +
geom_bar(stat="identity", fill="navy") +
labs(title = titles[k], x = "Abundance Octaves", y = "Counts") +
scale_x_continuous(breaks = 1:length(octave_means[[k]]), labels = names[[k]])
}
multiplot(plotlist = plots, cols = 2, title = "Mean Species Abundances")
# Plot
names = list(list(), list(), list(), list())
plots = list()
octave_means = list(octave_mean_500, octave_mean_1000, octave_mean_2500, octave_mean_5000)
titles = c("Initial population = 500", "Initial population = 1000", "Initial population = 2500", "Initial population = 5000")
for (k in c(1,2,3)) {
names[[k]] = c(names[[k]], parse(text="2^0 - 2^1"))
for (l in seq(2,length(octave_means[[k]]))) {
names[[k]] = c(names[[k]], parse(text=paste0("2^",toString(l-1)," - 2^",toString(l))))
}
plot_df = data.frame(bins = seq(1,length(octave_means[[k]])), counts = octave_means[[k]])
plots[[k]] = ggplot(data = plot_df, aes(x = bins, y = counts)) +
geom_bar(stat="identity", fill="navy") +
labs(title = titles[k], x = "Abundance Octaves", y = "Counts") +
scale_x_continuous(breaks = 1:length(octave_means[[k]]), labels = names[[k]])
}
multiplot(plotlist = plots, cols = 2, title = "Mean Species Abundances")
for (k in c(1,2,3)) {
names[[k]] = c(names[[k]], parse(text="2^0 - 2^1"))
for (l in seq(2,length(octave_means[[k]]))) {
names[[k]] = c(names[[k]], parse(text=paste0("2^",toString(l-1)," - 2^",toString(l))))
}
plot_df = data.frame(bins = seq(1,length(octave_means[[k]])), counts = octave_means[[k]])
plots[[k]] = ggplot(data = plot_df, aes(x = bins, y = counts)) +
geom_bar(stat="identity", fill="navy") +
labs(title = titles[k], x = "Abundance Octaves", y = "Counts") +
scale_x_continuous(breaks = 1:length(octave_means[[k]]), labels = names[[k]])
}
multiplot(plotlist = plots, cols = 2)
# Plot
names = list(list(), list(), list(), list())
plots = list()
octave_means = list(octave_mean_500, octave_mean_1000, octave_mean_2500, octave_mean_5000)
titles = c("Initial population = 500", "Initial population = 1000", "Initial population = 2500", "Initial population = 5000")
for (k in c(1,2,3)) {
names[[k]] = c(names[[k]], parse(text="2^0 - 2^1"))
for (l in seq(2,length(octave_means[[k]]))) {
names[[k]] = c(names[[k]], parse(text=paste0("2^",toString(l-1)," - 2^",toString(l))))
}
plot_df = data.frame(bins = seq(1,length(octave_means[[k]])), counts = octave_means[[k]])
plots[[k]] = ggplot(data = plot_df, aes(x = bins, y = counts)) +
geom_bar(stat="identity", fill="navy") +
labs(title = titles[k], x = "Abundance Octaves", y = "Counts") +
scale_x_continuous(breaks = 1:length(octave_means[[k]]), labels = names[[k]])
}
multiplot(plotlist = plots, cols = 2)
source('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
source('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
source('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
source('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
source('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
source('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
source('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
source('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
source('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
source('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
source('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
source('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
source('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
source('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
source('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
source('~/Documents/QMEE/Week8/Code/process_HPC_results.R')
source('~/Documents/QMEE/Week8/Code/model_functions.R')
question_12()
