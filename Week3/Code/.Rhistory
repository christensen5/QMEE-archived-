getwd()
ls
MyData = read.csv("../Data/trees.csv")
ls()
head(MyData)
str(MyData)
MyData = read.csv("../Data/trees.csv", header=T)
MyData
head(MyData)
MyData = read.csv("../Data/trees.csv", header=TRUE)
head(MyData)
MyData = read.csv("../Data/trees.csv", sep=",", header=TRUE)
head(MyData)
MyData = read.csv("../Data/trees.csv", sep='',', header=TRUE)
MyData = read.csv("../Data/trees.csv", sep='',',# header=TRUE)
MyData = read.csv("../Data/trees.csv", sep=',', header=TRUE)
head(MyData)
write.csv(MyData, "../Results/MyData.csv")
dir("../Results)")
dir("../Results/")
write.table(MyData[1,], file = "../Results/MyData.csv", append = TRUE)
write.csv(MyData, "../Results/MyData.csv", row.names = TRUE)
write.csv(MyData, "../Results/MyData.csv", col.names = FALSE)
?copy
MyData <- read.csv("../Data/trees.csv", header = TRUE) #import with headers
getwd()
source("basic_io.R")
?srouce
?source
source("boilerplate.R")
class(MyFunction)
MyFunctio('a','b')
MyFunction('a','b')
out = MyFunction('a','b')
out
source("TreeHeight.R")
# Define the input data file.
InputFile = read.csv("../Data/trees.csv",col.names=TRUE,row.names=FALSE)
# Define the input data file.
InputFile = read.csv("../Data/trees.csv",col.names=TRUE,row.names=FALSE)
# Define the input data file.
InputFile = read.csv("../Data/trees.csv")
col.names(InputFile)
col.names(InputFile,header=TRUE)
# Define the input data file.
InputFile = read.csv("../Data/trees.csv",header=TRUE)
View(InputFile)
View(InputFile)
c(numTrees,~) <- dim(InputFile)
dim(InputFile)
(x,y) = dim(InputFile)
dim(InputFile)[0]
dim(InputFile)[1
]
MyData
MyData[,1]
MyData
InputFile[,1]
dim(InputFile)
[]
c()
View(InputFile)
View(MyData)
View(InputFile)
rm('InputFile','MyData')
Input.File = read.csv("../Data/trees.csv", header = TRUE)
# Run TreeHeight on each entry in the input file, saving the outputs as a column vector.
Heights = c();
for (i in 1:dim(Input.File)[1]) {
Heights = cbind(Heights, TreeHeight(Input.File[i,3],Input.File[i,2]))
}
dim(Heights)
for (i in 1:dim(Input.File)[1]) {
Heights = rbind(Heights, TreeHeight(Input.File[i,3],Input.File[i,2]))
}
dim(Heights)
rm Heights
rm 'Heights''
rm("Heights")
for (i in 1:dim(Input.File)[1]) {
Heights = rbind(Heights, TreeHeight(Input.File[i,3],Input.File[i,2]))
}
Heights = c();
for (i in 1:dim(Input.File)[1]) {
Heights = rbind(Heights, TreeHeight(Input.File[i,3],Input.File[i,2]))
}
dim(Heights)
Output.Frame = cbind(Input.File, Heights) #Appent t
dim Input.FIle
dim Input.File
dim(Input.File)
dim(Output.Frame)
head(Input.File)
head(Output.Frame)
Tree.Height = c();
for (i in 1:dim(Input.File)[1]) {
Tree.Height = rbind(Tree.Height, TreeHeight(Input.File[i,3],Input.File[i,2]))
}
Output.Frame = cbind(Input.File, Tree.Height)
write.csv("Output.Frame", "../Results/TreeHts.csv")
write.csv(Output.Frame, "../Results/TreeHts.csv")
help(commandArgs)
source("TreeHeight.R")
TreeHeight.R
TreeHeight()
help(commandArgs)
commandArgs()
# Define the input data file.
Input.File = read.csv("../Data/trees.csv", header = TRUE)
rm ('Input.File','Output.Frame')
# Run TreeHeight on each entry in the input file, saving the outputs as a column vector.
Tree.Height = c();
commandArgs
commandArgs()
return(height)
debugSource('~/Documents/QMEE/Week3/Code/get_TreeHeight.R')
commandArgs()
commandArgs()
commandArgs(trailingOnly=TRUE)
source('~/Documents/QMEE/Week3/Code/TreeHeight.R')
source('~/Documents/QMEE/Week3/Code/TreeHeight.R')
source('~/Documents/QMEE/Week3/Code/TreeHeight.R')
debugSource('~/Documents/QMEE/Week3/Code/get_TreeHeight.R')
debugSource('~/Documents/QMEE/Week3/Code/get_TreeHeight.R')
?tail
?Str_sub
?str_sub
?substr
substr("123456",1,3)
Input.Dir="test.csv"
substr(Input.Dir,1,nchar(Input.Dir)-4)
rm('Input.Dir')
rm('')
rm("")
rm("*")
rm(ls())
rm(ls())
ls9)
ls()
rm(ls())
rm([ls()])
rm(ls()[])
rm(ls()[,])
rm('Input.Frame','Output.Dir')
rm('Input.Frame','Output.Dir')
source('~/Documents/QMEE/Week3/Code/TreeHeight.R')
source('~/Documents/QMEE/Week3/Code/get_TreeHeight.R')
source("control.R")
control()
## for loop using a vector
v1 <- c("a","bc","def")
source('~/Documents/QMEE/Week3/Code/control.R')
sudo apt-get install r-cran-ggplot2 r-cran-plyr r-cran-reshape2
R0 = 12.14
C0 = 1.25
R1 = R0(1 + (1-(R0/35))-0.5)
R1 = R0*(1 + (1-(R0/35))-0.5)
C1 = C0*(1-1.5+R0)
R1 = R0*(1 + (1-(R0/35))-(0.1*C0)
)
R1 = R0*(1 + (1-(R0/35))-(0.1*C0))
C1 = C0*(1-1.5+(0.075*R0)
)
C1 = C0*(1-1.5+(0.075*R0))
getwd()
source("SumAllElements.R")
source("Vectorize1.R")
source("Vectorize1.R")
source("apply1.R")
source("apply1.R")
source("apply2.R")
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
mean(rnorm(100,1,100))
mean(rnorm(100,1,100))
mean(rnorm(100,1,100))
mean(rnorm(100,1,100))
mean(rnorm(100,1,100))
mean(rnorm(10000,1,10000))
mean(rnorm(10000,1,10000))
mean(rnorm(10000,1,10000))
mean(rnorm(10000,1,10000))
?rnorm
mean(rnorm(10000,1,10000))
mean(rnorm(100000000,1,100000000))
mean(rnorm(10000,10000,100000000))
mean(rnorm(1,100000000,100000000))
x <- 1:20
?Rep
?Rep
?rep
rep(letters[1:5])
letters[1:5]
factor(rep(letter[1:5], each = 4))
factor(rep(letters[1:5], each = 4))
y = factor(rep(letters[1:5], each = 4))
?y
str(y)
y
tapply(x, y, sum)
attach(iris)
print(iris)
str(iris)
by(iris[,1:2], iris$Species, colMeans)
by(iris[,1:2], iris$Petal.Width, colMeans)
runif(5)
runif(5,5)
?runif
install.packages('dplyr')
source("break.R")
source("next.R")
?Rep
?rep
?replicate
source("Ricker.R")
source("Ricker.R")
source("Ricker.R")
require(dplyr)
attach(iris)
dplyr::tbl_df(iris)
dplyr::glimpse(iris)
utils::View(iris)
dplyr::filter(iris, Sepal.Length > 7)
dplyr::slice(iris, 10:15)
?runif
?apply
dim(M)
i
x
tail(x)
tail(x,1)
source("Vectorize2.R")
source("Vectorize2.R")
stockrick()
stochrick()
N1 = stochrick()
N2 = stochrickvect()
tail(N,1)*exp(r*(1-(tail(N,1)/K)+rnorm(1,0,sigma)))
tail(N,1)*exp(r*(1-(tail(N,1)/K)+rnorm(1,0,sigma)))
stochrickvect <- function(p0 = runif(1000,.5,1.5), r = 1.2, K = 1, sigma = 0.2, numyears = 100) {
N <- p0 #store initial populations
for (yr in 2:numyears) {
N = cbind(N, apply(N, 2, tail(N,1)*exp(r*(1-(tail(N,1)/K)+rnorm(1,0,sigma))) ))
}
return(N)
}
Ntest = stochrickvect()
for (yr in 2:numyears) #for each pop, loop through the years
for (yr in 2:numyears) {
N = cbind(N, apply(N, 2, tail(N,1)*exp(r*(1-(tail(N,1)/K)+rnorm(1,0,sigma))) ))
}
stochrickvect <- function(p0 = runif(1000,.5,1.5), r = 1.2, K = 1, sigma = 0.2, numyears = 100) {
N <- p0 #store initial populations
for (yr in 2:numyears) {
N = cbind(N, apply(N, 2, tail(N,1)*exp(r*(1-(tail(N,1)/K)+rnorm(1,0,sigma))) ))
}
return(N)
}
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
tail(N,1)*exp(r*(1-(tail(N,1)/K)+rnorm(1,0,sigma)))
tail(N,1)*exp(r*(1-(tail(N,1)/K)+rnorm(1,0,sigma)))
tail(N,1)*exp(r*(1-(tail(N,1)/K)+rnorm(1,0,sigma)))
tail(N,1)*exp(r*(1-(tail(N,1)/K)+rnorm(1,0,sigma)))
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
N
p0
v1 = c(1:5)
v1*v1
exp(v1)
?rnorm
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
tail(N,1)*exp(r*(1-(tail(N,1)/K)) + rnorm(1,0,sigma)
)
tail(N,1)
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
N
dim(N)
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
N1 = stochrick()
N2 = stochrickvect()
sum(N1!=N2)
sum(N1==N2)
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
N1 = stochrick()
N2 = stochrickvect()
sum(N1!=N2)
sum(N1==N2)
tail(N1,1)
tail(N2,1)
sum(N1-N2 > 1e5)
sum(N1-N2 > 1e6)
sum(N1-N2 > 1e7)
sum(N1-N2 > 1e8)
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
?Replicate
?replicate
dim(replicate(100,rnorm(1000,1,0.1)))
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
p0 = runif(1000,.5,1.5)
size(p0)
dim(p0)
length(p0)
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
rands = replicate(length(p0),rnorm(numyears,1,sigma)) #pre-generate random fluctuations for each generation of each population.
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
return(N)
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
debugSource('~/Documents/QMEE/Week3/Code/Vectorize2.R')
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
dim(rands)
source('~/Documents/QMEE/Week3/Code/sample.R')
source('~/Documents/QMEE/Week3/Code/sample.R')
source('~/Documents/QMEE/Week3/Code/sample.R')
?Try
?try
?tryCatch
?recover
source('~/Documents/QMEE/Week3/Code/sample.R')
source('~/.active-rstudio-document')
rm(list=ls())
?load
load(../Data/KeyWestAnnualMeanTemperature.RData,Raw.Data)
load('../Data/KeyWestAnnualMeanTemperature.RData','Raw.Data')
load('../Data/KeyWestAnnualMeanTemperature.RData',Raw.Data)
load('../Data/KeyWestAnnualMeanTemperature.RData')
Data.Raw = load('../Data/KeyWestAnnualMeanTemperature.RData')
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
(res1-res2 > 1e-5)
sum(res1-res2 > 1e-2)
sum(res2-res3 > 1e-2)
res1
plot(1:1000,res3[,1])
length(res3[,1])
plot(1:100,res3[,1])
plot(1:100,res1[,1])
plot(1:100,res1[,2])
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
source('~/Documents/QMEE/Week3/Code/Vectorize2.R')
Raw.Data = load('../Data/KeyWestAnnualMeanTemperature.RData')
str(Raw.Data)
rm(list=ls())
?cor
load('../Data/KeyWestAnnualMeanTemperature.RData')
str(ats)
datamat = as.matrix(ats)
dim(datamat)
cor(datamat[1,2],datamat[2,2])
datamat[1,2]
cor(datamat[1:99,2], datamat[2:100,2])
test = c(1:10)
sample(test)
sample(test)
sample(test)
source('~/Documents/QMEE/Week3/Code/TAutoCorr.R')
length(sample(datamat{,2}))
length(sample(datamat[],2]))
length(sample(datamat[,2]))
source('~/Documents/QMEE/Week3/Code/TAutoCorr.R')
source('~/Documents/QMEE/Week3/Code/TAutoCorr.R')
source('~/Documents/QMEE/Week3/Code/TAutoCorr.R')
source('~/Documents/QMEE/Week3/Code/TAutoCorr.R')
source('~/Documents/QMEE/Week3/Code/TAutoCorr.R')
source('~/Documents/QMEE/Week3/Code/TAutoCorr.R')
source('~/Documents/QMEE/Week3/Code/TAutoCorr.R')
runif(1,6)
runif(1,1,6)
?runif
runit
dunif(1,1,6)
sample(c(1:6),1)
sample(c(1:6),1)
sample(c(1:6),1)
sample(c(1:6),1)
sample(c(1:6),1)
sample(c(1:6),1)
sample(c(1:20),1)
sample(c(1:20),100)
?sample
sample(c(1:20),100,replace=TRUE)
sample(c('a','b'))
sample(c('a','b'),1)
sample(c('a','b'),1)
sample(c('a','b'),1)
sample(c('a','b'),1)
sample(c('a','b'),1)
sample(c('a','b'),1)
sample(c('a','b'),1)
2^5
source('~/Documents/QMEE/Week3/Code/TAutoCorr.R')
source('~/Documents/QMEE/Week3/Code/TAutoCorr.R')
