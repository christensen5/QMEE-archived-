library('map')
library('map()')
library('maps')
maps('world')
map('world')
map('world', resolution=0)
clf
fig = map('world', resolution=0)
hold on
dim(gpdd)
dplyr::tbl_df(gpdd)
for (i in 1:dim(gpdd)[1]){
points(gpdd[i,3],gpdd[i,4])
}
source('~/Documents/QMEE/Week3/Code/GPDD_Plotter.R')
source('~/Documents/QMEE/Week3/Code/GPDD_Plotter.R')
source('~/Documents/QMEE/Week3/Code/GPDD_Plotter.R')
source('~/Documents/QMEE/Week3/Code/GPDD_Plotter.R')
source('~/Documents/QMEE/Week3/Code/GPDD_Plotter.R')
source('~/Documents/QMEE/Week3/Code/GPDD_Plotter.R')
source('~/Documents/QMEE/Week3/Code/GPDD_Plotter.R')
source('~/Documents/QMEE/Week3/Code/GPDD_Plotter.R')
source('~/Documents/QMEE/Week3/Code/GPDD_Plotter.R')
source('~/Documents/QMEE/Week3/Code/GPDD_Plotter.R')
grapics.off()
graphics.off()
fig = map('world', resolution=0) #plot base world map
?points
source('~/Documents/QMEE/Week3/Code/GPDD_Plotter.R')
source('~/Documents/QMEE/Week3/Code/GPDD_Plotter.R')
View(gpdd)
source('~/Documents/QMEE/Week3/Code/GPDD_Plotter.R')
points(0,0,col='r')
points(0,0,col='red')
points(-180,0,col='red')
points(180,0,col='red')
points(0,85,col='red')
points(0,-85,col='red')
source('~/Documents/QMEE/Week3/Code/GPDD_Plotter.R')
source('~/Documents/QMEE/Week3/Code/GPDD_Plotter.R')
?png
source('~/Documents/QMEE/Week3/Code/GPDD_Plotter.R')
source('~/Documents/QMEE/Week3/Code/GPDD_Plotter.R')
source('~/Documents/QMEE/Week3/Code/GPDD_Plotter.R')
?png
source('~/Documents/QMEE/Week3/Code/GPDD_Plotter.R')
source('~/Documents/QMEE/Week3/Code/GPDD_Plotter.R')
source('~/Documents/QMEE/Week3/Code/GPDD_Plotter.R')
source('~/Documents/QMEE/Week3/Code/TAutoCorr.R')
warnings9)
warnings())
warnings()
?sample
perm
perm[1:99]
length(perm[1:99])
x = merm[1:99]
x = perm[1:99]
y = perm[2:100]
test.cor(x,y)
cor.test(x,y)
cor.test(perm[1:99],perm[2:100])
source('~/Documents/QMEE/Week3/Code/TAutoCorr.R')
warnings()
source('~/Documents/QMEE/Week3/Code/TAutoCorr.R')
source('~/Documents/QMEE/Week3/Code/TAutoCorr.R')
source('~/Documents/QMEE/Week3/Code/TAutoCorr.R')
source('~/Documents/QMEE/Week3/Code/TAutoCorr.R')
source('~/Documents/QMEE/Week3/Code/TAutoCorr.R')
x
y
perm = sample(datamat[,2])
perm
source('~/Documents/QMEE/Week3/Code/TAutoCorr.R')
permCors = seq(NA, length(numPerms)) #seq(numPerms) #pre-allocate matrix
matrix(NA, 1, 10)
matrix[1,]
matrix[,1]
a = matrix(NA, 1, 10)
a[,1]
a[1,]
a[1]
a = seq(NA, 1, 10)
a = seq(1, 10, 1)
a
a[1]
as.matrix(a)
source('~/Documents/QMEE/Week3/Code/TAutoCorr.R')
source('~/Documents/QMEE/Week3/Code/TAutoCorr.R')
source('~/Documents/QMEE/Week3/Code/TAutoCorr.R')
?cor.test
source('~/Documents/QMEE/Week3/Code/TAutoCorr.R')
rep(NA,1000)
a = rep(NA, 1000)
permCors = matrix(NA,numPerms,1) #pre-allocate matrix
numPerms = 10000
permCors = matrix(NA,numPerms,1) #pre-allocate matrix
source('~/Documents/QMEE/Week3/Code/TAutoCorr.R')
source('~/Documents/QMEE/Week3/Code/TAutoCorr.R')
cor.test(perm[1:99], perm[2:100])[[1]]
a= cor.test(perm[1:99], perm[2:100])[[1]]
a
size(a)
dim(a)
is(a)
length(A)
length(a)
load("../Data/EcolArchives-E089-51-D1.csv")
load("../Data/EcolArchives-E089-51-D1.csv")
read.csv("../Data/EcolArchives-E089-51-D1.csv")
data = read.csv("../Data/EcolArchives-E089-51-D1.csv")
dim(data)
dplyr::glimpse(data)
boxplot(log(MyDF$Prey.mass),
xlab = "Location", ylab = "Predator Mass",
main = "Predator mass")
boxplot(log(data$Prey.mass),
xlab = "Location", ylab = "Predator Mass",
main = "Predator mass")
boxplot(log(data$Predator.mass) ~ data$Location,
xlab = "Location", ylab = "Predator Mass",
main = "PRedator mass by location")
par(fig=c(0,0.8,0,0.8))
garphics.off()
graphics.off()
?par()
par(fig=c(0,0.8,0,0.8))
plot(log(data$Predator.mass), log(data$Prey.mass)),
xlab= "Predator Mass (kg)", ylab = "Prey Mass (kg)")
plot(log(data$Predator.mass), log(data$Prey.mass)),
xlab = "Predator Mass (kg)", ylab = "Prey Mass (kg)")
plot(log(data$Predator.mass), log(data$Prey.mass), xlab = "Predator Mass (kg)", ylab = "Prey Mass (kg)")
par(fig=c(0.65, 1, 0, 0.8), new=T)
boxplot(log(data$Predator.mass), horizontal=T, axes=F)
boxplot(log(data$Predator.mass), horizontal=T, axes=F)
boxplot(log(data$Prey.mass), axes=F)
par(fig=c(0.8, 1, 0, 0.8), new=T)
boxplot(log(data$Prey.mass), axes=F)
boxplot(log(data$Prey.mass), axes=F)
graphics.off()
> par(fig=c(0,0.8,0,0.8)) # specify figure size as proportion
> plot(log(MyDF$Predator.mass),log(MyDF$Prey.mass),
xlab = "Predator Mass (kg)", ylab = "Prey Mass (kg)") # Add labels
> par(fig=c(0,0.8,0.55,1), new=TRUE)
> boxplot(log(MyDF$Predator.mass), horizontal=TRUE, axes=FALSE)
> par(fig=c(0.65,1,0,0.8),new=TRUE)
> boxplot(log(MyDF$Prey.mass), axes=FALSE)
> mtext("Fancy Predator-prey scatterplot", side=3, outer=TRUE, line=-3)
par(fig=c(0,0.8,0,0.8)) # specify figure size as proportion
plot(log(MyDF$Predator.mass),log(MyDF$Prey.mass),
xlab = "Predator Mass (kg)", ylab = "Prey Mass (kg)") # Add labels
par(fig=c(0,0.8,0.55,1), new=TRUE)
boxplot(log(MyDF$Predator.mass), horizontal=TRUE, axes=FALSE)
par(fig=c(0.65,1,0,0.8),new=TRUE)
boxplot(log(MyDF$Prey.mass), axes=FALSE)
mtext("Fancy Predator-prey scatterplot", side=3, outer=TRUE, line=-3)
myDF = data
par(fig=c(0,0.8,0,0.8)) # specify figure size as proportion
plot(log(MyDF$Predator.mass),log(MyDF$Prey.mass),
xlab = "Predator Mass (kg)", ylab = "Prey Mass (kg)") # Add labels
par(fig=c(0,0.8,0.55,1), new=TRUE)
boxplot(log(MyDF$Predator.mass), horizontal=TRUE, axes=FALSE)
par(fig=c(0.65,1,0,0.8),new=TRUE)
boxplot(log(MyDF$Prey.mass), axes=FALSE)
mtext("Fancy Predator-prey scatterplot", side=3, outer=TRUE, line=-3)
MyDF = myDF
rm("myDF, data")
rm(["myDF", "data"])
rm("myDF", "data")
par(fig=c(0,0.8,0,0.8)) # specify figure size as proportion
plot(log(MyDF$Predator.mass),log(MyDF$Prey.mass),
xlab = "Predator Mass (kg)", ylab = "Prey Mass (kg)") # Add labels
par(fig=c(0,0.8,0.55,1), new=TRUE)
boxplot(log(MyDF$Predator.mass), horizontal=TRUE, axes=FALSE)
par(fig=c(0.65,1,0,0.8),new=TRUE)
boxplot(log(MyDF$Prey.mass), axes=FALSE)
mtext("Fancy Predator-prey scatterplot", side=3, outer=TRUE, line=-3)
require(ggplot2)
qplot(log(Prey.mass), log(Predator.mass), data = MyDF,
colour = Type.of.feeding.interaction)
graphics.off()
qplot(log(Prey.mass), log(Predator.mass), data = MyDF,
colour = "red")
qplot(log(Prey.mass), log(Predator.mass), data = MyDF,
colour = I("red")
)
qplot(log(Prey.mass), log(Predator.mass), data = MyDF,
size=3)
qplot(log(Prey.mass), log(Predator.mass), data = MyDF,
size=3)
pdf()
dev.off9)
dev.off())
dev.off()
dev.off()
qplot(log(Prey.mass), log(Predator.mass), data = MyDF,
size=3)
qplot(log(Prey.mass), log(Predator.mass), data = MyDF,
size=I(3)
)
qplot(log(Prey.mass), log(Predator.mass), data = MyDF,
shape=3 )
qplot(log(Prey.mass), log(Predator.mass), data = MyDF,
shape=I(3) )
qplot(log(Prey.mass), log(Predator.mass), data = MyDF,
colour = Type.of.feeding.interaction, alpha=I(.5) )
qplot(log(Prey.mass), log(Predator.mass), data = MyDF,
geom=c("point", "smooth"))
qplot(log(Prey.mass), log(Predator.mass), data = MyDF,
colour = Type.of.feeding.interaction, geom=c("point", "smooth") )
qplot(log(Prey.mass), log(Predator.mass), data = MyDF,
colour = Type.of.feeding.interaction, geom=c("point", "smooth") )
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, geom=c("point", "smooth") )
f = qplot(log(Prey.mass), log(Predator.mass), data = MyDF, geom=c("point", "smooth") )
f = qplot(log(Prey.mass), log(Predator.mass), data = MyDF, geom=c("point", "smooth") )
rm("f")
qplot(Type.of.feeding.interaction,
log(Prey.mass/Predator.mass), data = MyDF)
qplot(Type.of.feeding.interaction,
log(Prey.mass/Predator.mass), data = MyDF,
geom = "jitter" )
qplot(Type.of.feeding.interaction,
log(Prey.mass/Predator.mass), data = MyDF,
geom = "jitter" )
qplot(Type.of.feeding.interaction,
log(Prey.mass/Predator.mass), data = MyDF,
geom = "jitter",
colour = Type.of.feeding.interaction)
dplyr::glimpse(MyDF)
qplot(Type.of.feeding.interaction,
log(Prey.mass/Predator.mass), data = MyDF,
geom = "jitter",
colour = Predator.lifestage)
qplot(Type.of.feeding.interaction,
log(Prey.mass/Predator.mass), data = MyDF,
geom = "boxplot" )
qplot(Type.of.feeding.interaction,
log(Prey.mass/Predator.mass), data = MyDF,
geom = "boxplot",
colour = Type.of.feeding.interaction)
qplot(Type.of.feeding.interaction,
log(Prey.mass/Predator.mass), data = MyDF,
geom = "boxplot",
colour = Predator.lifestage)
qplot(log(Prey.mass/Predator.mass), data= MyDF)
qplot(log(Prey.mass/Predator.mass), data= MyDF, colour = Type.of.feeding.interaction)
qplot(log(Prey.mass/Predator.mass), data= MyDF, fill = Type.of.feeding.interaction)
qplot(log(Prey.mass/Predator.mass), data= MyDF, fill = Type.of.feeding.interaction, binwidth=1)
qplot(log(Prey.mass/Predator.mass), data = MyDF,
geom = "density", fill = Type.of.feeding.interaction)
qplot(log(Prey.mass/Predator.mass), data = MyDF,
geom = "density", fill = Type.of.feeding.interaction, alpha = I(0.5) )
qplot(log(Prey.mass/Predator.mass), data = MyDF,
geom = "density", colours = Type.of.feeding.interaction )
qplot(log(Prey.mass/Predator.mass), data = MyDF,
geom = "density", colour = Type.of.feeding.interaction )
qplot(log(Prey.mass/Predator.mass),
facets = Type.of.feeding.interaction ~.,
data = MyDF,
geom = "density", colours = Type.of.feeding.interaction )
qplot(log(Prey.mass/Predator.mass),
facets = Type.of.feeding.interaction ~.,
data = MyDF,
geom = "density", colours = Type.of.feeding.interaction )
qplot(log(Prey.mass/Predator.mass),
facets = Type.of.feeding.interaction ~.,
data = MyDF,
geom = "density")
qplot(log(Prey.mass/Predator.mass),
facets = Type.of.feeding.interaction + Location ~.,
data = MyDF,
geom = "density")
qplot(log(Prey.mass/Predator.mass),
facets = Type.of.feeding.interaction + Predator.lifestage ~.,
data = MyDF,
geom = "density")
qplot(Prey.mass, Predator.mass, data=MyDF, log="xy")
qplot(Prey.mass, Predator.mass, data=MyDF, log="x")
qplot(Prey.mass, Predator.mass, data=MyDF, log="xy",
main = "Plot title",
xlab = "xlabel",
ylab = "ylabel") + theme_bw()
qplot(log(Prey.mass/Predator.mass),
facets = Type.of.feeding.interaction ~.,
data = MyDF,
geom = "density")
qplot(log(Prey.mass/Predator.mass),
data = MyDF,
geom = "density", colour=Type.of.feeding.interaction)
qplot(log(Prey.mass/Predator.mass),
facets = Type.of.feeding.interaction ~.,
data = MyDF,
geom = "density", colour=Type.of.feeding.interaction)
p <- ggplot(MyDF, aes(x = log(Predator.mass), y = log(Prey.mass), colour = Type.of.feeding.interaction ))
p
p + geom_point()
p <- ggplot(MyDF, aes(x = Predator.mass, y = Prey.mass, colour = Type.of.feeding.interaction ), scale(log(xy)))
graphics.off()
p + geom_point()
p <- ggplot(MyDF, aes(x = log(Predator.mass), y = log(Prey.mass), colour = Type.of.feeding.interaction ))
q <- p + geom_point(size=I(2), shape=I(10) ) + theme_bw()
q
require(reshape2)
GenerateMatrix <- function(N){
M <- matrix(runif(N * N), N, N)
return(M)
}
M <- GenerateMatrix(10)
M[1:3,1:3]
Melt <- melt(M)
Melt
ggplot(Melt, aes(Var1, Var2, fill = value)) + geom_tile()
min(Melt)
Melt2 = Melt-0.5
ggplot(Melt2, aes(Var1, Var2, fill = value)) + geom_tile()
p = p + geom_tile(colour="black")
q = p + theme(legend.position = "none")
q <- p + theme(legend.position = "none",
panel.background = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank())
q + scale_fill_continuous(low="yellow", high = "darkgreen")
p <- ggplot(Melt, aes(Var1, Var2, fill = value)) + geom_tile()
p = p + geom_tile(colour="black")
q = p + theme(legend.position = "none")
q <- p + theme(legend.position = "none",
panel.background = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank())
q + scale_fill_continuous(low="yellow", high = "darkgreen")
q + scale_fill_gradient2()
q + scale_fill_gradient()
q + scale_fill_gradient3()
q + scale_fill_gradientn(colours = grey.colours(10))
q + scale_fill_gradientn(colours = grey.colors(10))
q + scale_fill_gradientn(colours = grey.colors(1))
q + scale_fill_gradientn(colours = grey.colors(100))
q + scale_fill_gradientn(colours = rainbow(10))
q + scale_fill_gradientn(colours = rainbow(100))
q + scale_fill_gradientn(colours = c("red", "white", "blue") )
build_ellipse <- function(hradius, vradius){
npoints = 250
a <- seq(0, 2 * pi, length = npoints + 1)
x <- hradius * cos(a)
y <- vradius * sin(a)
return(data.frame(x = x, y = y))
}
# Size of the matrix
N <- 250
# Build the matrix
M <- matrix(rnorm(N * N), N, N)
# Find the eigenvalues
eigvals <- eigen(M)$values
# Build a dataframe
eigDF <- data.frame("Real" = Re(eigvals),
"Imaginary" = Im(eigvals))
my_radius <- sqrt(N)
ellDF <- build_ellipse(my_radius, my_radius)
names(ellDF) <- c("Real", "Imaginary")
p
eigDF
p <- ggplot(eigDF, aes(Real, Imaginary))
p
figure.off()
graphics.off()
p <- ggplot(eigDF, aes(Real, Imaginary))
p
p <- p + geom_point(shape = I(3)) + theme(legend.position = "none")
p
p <- p + geom_hline(aes(yintercept = 0))
p
p <- p + geom_vline(aes(xintercept = 0))
p
p <- p +geom_polygon(data = ellDF,
aes(Real, Imaginary, alpha = 1/20, fill="red"))
p
pdf("../Results/Girko.pdf")
print(p)
dev.off()
a <- read.table("../Data/Results.txt", header=T)
a <- read.table("../Data/Results.txt", header=T)
head(a[:,])
head(a)
tail(a)
a$ymin <- rep(0,dim(a[1]))
a$ymin <- rep(0,dim(a)[1])
a$ymin <- rep(0,dim(a[1]))
tail(a)
p <- ggplot(a)
p <- p + geom_linerange(data = a, aes(x,ymin=ymin,ymax=y1,size=0.5),colour="#E69F00",alpha=1/2,show_guide=F
)
p
p <- p + geom_linerange(data = a, aes(x=x,ymin=ymin,ymax=y2,size=0.5),colour="#56B4E9",alpha=1/2,show_guide=F)
p <- p + geom_linerange(data = a, aes(x=x,ymin=ymin,ymax=y3,size=0.5),colour="#D55E00",alpha=1/2,show_guide=F)
p
p <- p + geom_text(data=a, aes(x,-500, label = Label))
p
p <- p + scale_x_continuous("My x axis", breaks = seq (3, 5, by, 0.05)) +
scale_y_continuous("My y axis") + theme_bw() + theme(leggend.position = "none")
p <- p + scale_x_continuous("My x axis", breaks = seq (3, 5, by= 0.05)) +
scale_y_continuous("My y axis") + theme_bw() + theme(leggend.position = "none")
p <- p + scale_x_continuous("My x axis", breaks = seq (3, 5, by= 0.05)) +
scale_y_continuous("My y axis") + theme_bw() + theme(legend.position = "none")
p
pdf("../Results/MyBars.pdf")
print(p)
dev.off()
getwd()
cd ../Data
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header=F,straingsAsFactors=F))
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header=F,stringsAsFactors=F))
rm(list=())
rm(list=[]
rm(list=""
)
rm(list=ls())
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header=F,stringsAsFactors=F))
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header=T,sep=";",stringsAsFactors=F)
dplyr::glimpse(MyMetaData)
dplyr::summarise(MyMetaData)
MyData[-1,]
MyData
attach(iris)
dplyr::tbl_df(iris)
randn
rnorm
rnorm(10)
rep
rep(rnorm(2),3)
?rep
rep(rnorm(2),4,2)
rep(rnorm(2),2,2)
rep(rnorm(2),2,4)
replicate(10,rnorm(20))
dd = replicate(1000,rnorm(2000))
ddtest = replicate(3,rnorm(4))
ddtest
nrows = dim(ddtest)[1]
ncols = dim(ddtest)[2]
reltest = ddtest/colSums(ddtest)
reltest
dd = abs(dd)
ddtest = abs(ddtest)
ddtest
reltest = ddtest/colSums(ddtest)
reltest
ddtest
colSums(ddtest)
1.3/6.9
ddtest[2,1]/colSums(ddtest)[1]
reltest
reltest2 = matrix(nrow = nrows, ncol = ncols)
cc = colSums(ddtest)
for(i in 1:nrows){
for(j in 1:ncols){
reltest2[i,j]=ddtest[i,j]/cc[j]
}
}
reltest2
reltest1
reltest
colSums(reltest)
colSums(reltest2)
colSums(ddtest)
reltest
set.seed(123)
ddtest = abs(replicate(3,rnorm(4)))
dd = abs(replicate(3,rnorm(4)))
Nrows = dim(dd)[1]
Ncols = dim(dd)[2]
dd.rel = dd/colSums(dd)
dd.rel2 = matrix(nrow = Nrows, ncol = Ncols)
cc = colSums(dd)
for(i in 1:Nrows){
for(j in 1:Ncols){
dd.del2[i,j]=dd[i,j]/cc[j]
}
}
for(i in 1:Nrows){
for(j in 1:Ncols){
dd.rel2[i,j]=dd[i,j]/cc[j]
}
}
colSums(dd.rel)
colSums(dd.rel2)
set.seed(123)
ddtest = abs(replicate(3,rnorm(4)))
dd = abs(replicate(3,rnorm(4)))
Nrows = dim(dd)[1]
Ncols = dim(dd)[2]
dd.rel = dd/colSums(dd)
dd.rel2 = matrix(nrow = Nrows, ncol = Ncols)
cc = colSums(dd)
for(i in 1:Nrows){
for(j in 1:Ncols){
dd.rel2[i,j]=dd[i,j]/cc[j]
}
}
colSums(dd.rel)
#[1] 0.9796965 1.1592541 0.9492360
colSums(dd.rel2)
#[1] 1 1 1
